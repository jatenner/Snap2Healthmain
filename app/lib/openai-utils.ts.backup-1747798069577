import OpenAI from 'openai';
import { retryWithExponentialBackoff } from './api-utils';
import { safeJsonParse } from '@/app/api/analyze-meal/json-fix';
import { safeStringify } from '@/utils/json-helpers';
import { fixApiKeyLineBreaks, getOpenAIApiKey } from './openai-key-fix';

// Define interface for image analysis result
export interface ImageAnalysisResult {
  foods: string[];
  calories: number;
  protein: number;
  fat: number;
  carbs: number;
  analysis: {
    macronutrients: {
      protein: number;
      carbohydrates: number;
      fat: number;
      fiber: number;
    };
    micronutrients: {
      vitaminA: number;
      vitaminC: number;
      calcium: number;
      iron: number;
    };
  };
  ingredients: string[];
  benefits: string[];
  concerns: string[];
  glycemicLoad: number;
  // Allergies field is deprecated and NOT used in database operations
  // This is optional and should not be included in database insertions
  allergies?: string[];
  macronutrients: any[];
  micronutrients: any[];
  insights?: string;
}

// Create a singleton OpenAI client
let openaiClient: OpenAI | null = null;

function getOpenAIClient(): OpenAI {
  if (openaiClient) return openaiClient;

  // Get API key with automatic fixing of formatting issues
  let apiKey = getOpenAIApiKey();
  
  // If getOpenAIApiKey failed, try direct access with line break fixing
  if (!apiKey && process.env.OPENAI_API_KEY) {
    apiKey = fixApiKeyLineBreaks(process.env.OPENAI_API_KEY);
  }
  
  const orgId = process.env.OPEN_ORG_ID || process.env.OPENAI_ORG_ID;
  const fixedOrgId = orgId ? fixApiKeyLineBreaks(orgId) : undefined;

  if (!apiKey) {
    console.error('[openai-utils] OPENAI_API_KEY is not defined in environment variables and no fallback found');
    throw new Error('OpenAI API key is missing');
  }

  try {
    // Explicitly define configuration with defaults for gpt-4o
    const openaiConfig = {
      apiKey,
      organization: fixedOrgId,
      dangerouslyAllowBrowser: true,
      defaultQuery: {
        model: 'gpt-4o' // Set default model
      }
    };
    
    openaiClient = new OpenAI(openaiConfig);
    
    console.log('[openai-utils] OpenAI client initialized successfully');
    console.log('[openai-utils] Using API Key: ' + apiKey.substring(0, 5) + '...');
    console.log('[openai-utils] Using Org ID: ' + (fixedOrgId ? fixedOrgId.substring(0, 5) + '...' : 'Not provided'));
    console.log('[openai-utils] Default model: gpt-4o');
    
    // Store model info in localStorage for debugging (client-side only)
    if (typeof window !== 'undefined') {
      try {
        const config = {
          model: 'gpt-4o', // IMPORTANT: Must use gpt-4o not gpt-4-vision-preview
          apiKey: true,
          timestamp: new Date().toISOString(),
          env: process.env.NODE_ENV,
          hasOrgId: !!fixedOrgId,
          keyPrefix: apiKey.substring(0, 5)
        };
        localStorage.setItem('openai-config', JSON.stringify(config));
        console.log('[openai-utils] Stored OpenAI config in localStorage');
        
        // Store global flags
        if (window) {
          window.__OPENAI_API_KEY_AVAILABLE = true;
          window.__OPENAI_MODEL_NAME = 'gpt-4o';
        }
      } catch (e) {
        console.error('[openai-utils] Failed to store config in localStorage:', e);
      }
    }
    
    return openaiClient;
  } catch (error) {
    console.error('[openai-utils] Error initializing OpenAI client:', error);
    throw new Error('Failed to initialize OpenAI client');
  }
}

// Generate a comprehensive analysis prompt
function generateAnalysisPrompt(goal: string): string {
  return `Analyze this food image and provide a detailed nutritional analysis. 
The user's goal is: ${goal}.

Provide a comprehensive JSON response with the following fields:
- foods: Array of food items in the image
- calories: Total estimated calories
- protein: Total protein in grams
- fat: Total fat in grams
- carbs: Total carbohydrates in grams
- analysis: Object containing detailed analysis
  - macronutrients: Object with protein, carbohydrates, fat, fiber (all in grams)
  - micronutrients: Object with vitaminA, vitaminC, calcium, iron (all in % daily value)
- ingredients: Array of key ingredients
- benefits: Array of health benefits
- concerns: Array of potential health concerns
- glycemicLoad: Estimated glycemic load (number)
- macronutrients: Array of macronutrient objects with name, amount, unit, percentDailyValue
- micronutrients: Array of micronutrient objects with name, amount, unit, percentDailyValue
- insights: String with brief nutritional insights for this meal

Return only valid JSON. Do not include markdown or text outside the JSON.`;
}

// Mock data generator for testing
function generateMockAnalysisData(): ImageAnalysisResult {
  return {
    foods: ['Grilled Chicken Breast', 'Brown Rice', 'Steamed Broccoli'],
    calories: 450,
    protein: 35,
    fat: 10,
    carbs: 55,
    analysis: {
      macronutrients: {
        protein: 35,
        carbohydrates: 55,
        fat: 10,
        fiber: 8
      },
      micronutrients: {
        vitaminA: 25,
        vitaminC: 80,
        calcium: 15,
        iron: 20
      }
    },
    ingredients: ['Chicken', 'Brown Rice', 'Broccoli', 'Olive Oil', 'Garlic', 'Herbs'],
    benefits: ['High in protein for muscle recovery', 'Complex carbs for sustained energy', 'Rich in vitamins and minerals'],
    concerns: ['May be high in sodium if seasoned heavily'],
    glycemicLoad: 15,
    // No allergies field included
    macronutrients: [
      { name: 'Protein', amount: 35, unit: 'g', percentDailyValue: 70 },
      { name: 'Carbohydrates', amount: 55, unit: 'g', percentDailyValue: 18 },
      { name: 'Fat', amount: 10, unit: 'g', percentDailyValue: 15 },
      { name: 'Fiber', amount: 8, unit: 'g', percentDailyValue: 29 }
    ],
    micronutrients: [
      { name: 'Vitamin A', amount: 25, unit: '%', percentDailyValue: 25 },
      { name: 'Vitamin C', amount: 80, unit: '%', percentDailyValue: 80 },
      { name: 'Calcium', amount: 15, unit: '%', percentDailyValue: 15 },
      { name: 'Iron', amount: 20, unit: '%', percentDailyValue: 20 }
    ],
    insights: 'This meal is well-balanced with good protein content for muscle maintenance and recovery. The complex carbohydrates provide sustained energy, while the vegetables add essential vitamins and minerals.'
  };
}

// Safe parsing of OpenAI response
function safeParseOpenAIResponse(responseText: string): any {
  try {
    // First try direct JSON parse
    try {
      return JSON.parse(responseText);
    } catch (e) {
      console.log('[openai-utils] Direct JSON parse failed, trying with regex');
    }

    // Try to extract JSON using regex
    const jsonMatch = responseText.match(/```json\s*([\s\S]*?)\s*```|(\{[\s\S]*\})/);
    if (jsonMatch) {
      const jsonStr = jsonMatch[1] || jsonMatch[2];
      return JSON.parse(jsonStr);
    }

    // Use the custom safe parser
    return safeJsonParse(responseText, {});
  } catch (error) {
    console.error('[openai-utils] Failed to parse OpenAI response:', error);
    console.error('[openai-utils] Response text:', responseText);
    throw new Error('Failed to parse analysis result');
  }
}

// Main function to analyze an image with GPT-4 Vision
export async function analyzeImageWithGPT(
  base64Image: string,
  goal: string = 'General Health',
  useMock: boolean = false
): Promise<ImageAnalysisResult> {
  console.log('[openai-utils] Starting image analysis with goal:', goal);
  
  // For testing or when OpenAI is unavailable
  if (useMock || process.env.NODE_ENV === 'test' || !process.env.OPENAI_API_KEY) {
    console.log('[openai-utils] Running in MOCK mode - returning synthetic data');
    return generateMockAnalysisData();
  }

  try {
    const openai = getOpenAIClient();
    const prompt = generateAnalysisPrompt(goal);

    // Use retry mechanism for robustness
    const response = await retryWithExponentialBackoff(
      async () => {
        console.log('[openai-utils] Sending request to OpenAI with model: gpt-4o');
        try {
          return await openai.chat.completions.create({
            model: 'gpt-4o', // ALWAYS use gpt-4o, NEVER use gpt-4-vision-preview
            max_tokens: 1024,
            messages: [
              {
                role: 'user',
                content: [
                  { type: 'text', text: prompt },
                  {
                    type: 'image_url',
                    image_url: {
                      url: base64Image,
                      detail: 'high'
                    }
                  }
                ]
              }
            ]
          });
        } catch (error: any) {
          // Check specifically for deprecated model errors
          if (error?.error?.code === 'model_not_found' && 
              error?.error?.message?.includes('gpt-4-vision-preview has been deprecated')) {
            console.warn('[openai-utils] Caught deprecated model error, retrying with gpt-4o explicitly');
            // Try again with explicit gpt-4o
            return await openai.chat.completions.create({
              model: 'gpt-4o', // Force gpt-4o
              max_tokens: 1024,
              messages: [
                {
                  role: 'user',
                  content: [
                    { type: 'text', text: prompt },
                    {
                      type: 'image_url',
                      image_url: {
                        url: base64Image,
                        detail: 'high'
                      }
                    }
                  ]
                }
              ]
            });
          }
          // Re-throw any other errors for the retry mechanism
          throw error;
        }
      },
      {
        maxRetries: 3,
        baseDelayMs: 1000,
        onRetry: (attempt, error) => {
          console.error(`[openai-utils] Retry attempt ${attempt} after error:`, error);
        }
      }
    );

    // Parse the JSON response from GPT-4 Vision
    const responseMessage = response.choices[0].message;
    const content = responseMessage.content;

    if (!content) {
      console.error('[openai-utils] OpenAI returned empty response content');
      // Return mock data as fallback
      console.log('[openai-utils] Returning fallback mock data due to empty response');
      return generateMockAnalysisData();
    }

    const result = safeParseOpenAIResponse(content);
    console.log('[openai-utils] Successfully parsed response from OpenAI');
    return result;
  } catch (error) {
    console.error('[openai-utils] Error analyzing image with GPT:', error);
    
    // Return mock data as fallback in case of error
    console.log('[openai-utils] Returning fallback mock data due to error');
    return generateMockAnalysisData();
  }
}

// Check if we should enable mock mode
export const shouldUseMockMode = (): boolean => {
  return process.env.MOCK_OPENAI === 'true';
};

/**
 * Generate a fallback meal analysis when OpenAI is unavailable
 * This allows the app to continue functioning even without API access
 */
export function generateFallbackMealAnalysis(imageUrl = '', goal = 'General Health'): any {
  console.log('[openai-utils] Generating fallback meal analysis');
  
  // Basic meal analysis with standard macro and micronutrients
  // IMPORTANT: No allergies field to ensure database compatibility
  return {
    mealName: 'Food Analysis (Fallback)',
    calories: 500,
    goal: goal,
    protein: 25,
    fat: 20,
    carbs: 50,
    macronutrients: [
      { name: "Protein", amount: 25, unit: "g", percentDailyValue: 50 },
      { name: "Carbs", amount: 50, unit: "g", percentDailyValue: 17 },
      { name: "Fat", amount: 20, unit: "g", percentDailyValue: 31 }
    ],
    micronutrients: [
      { name: "Vitamin C", amount: 45, unit: "mg", percentDailyValue: 50 },
      { name: "Iron", amount: 2.5, unit: "mg", percentDailyValue: 14 },
      { name: "Calcium", amount: 200, unit: "mg", percentDailyValue: 15 }
    ],
    foods: [
      "Mixed Vegetables",
      "Protein Source",
      "Carbohydrates"
    ],
    benefits: [
      "Good source of protein",
      "Contains essential vitamins and minerals"
    ],
    concerns: [
      "This is a fallback analysis and may not be accurate"
    ],
    ingredients: [
      "Vegetables",
      "Protein",
      "Carbohydrates"
    ],
    analysis: {
      macronutrients: {
        protein: 25,
        carbohydrates: 50,
        fat: 20,
        fiber: 5
      },
      micronutrients: {
        vitaminA: 20,
        vitaminC: 50,
        calcium: 15,
        iron: 14
      }
    },
    glycemicLoad: 15,
    insights: "This is a fallback analysis generated because the AI analysis service is currently unavailable. The nutritional information shown is an estimate and not specific to your meal. Please try again later for an accurate analysis.",
    _generated: "fallback",
    _timestamp: new Date().toISOString()
  };
}

// Add any other OpenAI functions below that your application needs
