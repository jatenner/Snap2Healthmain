import OpenAI, { ClientOptions } from 'openai';
import { retryWithExponentialBackoff, validateMealAnalysisData } from './api-utils';
import { safeJsonParse } from '@/app/api/analyze-meal/json-fix';
import { safeStringify } from '@/utils/json-helpers';

// Define interface for image analysis result
export interface ImageAnalysisResult {
  foods: string[];
  calories: number;
  protein: number;
  fat: number;
  carbs: number;
  analysis: {
    macronutrients: {
      protein: number;
      carbohydrates: number;
      fat: number;
      fiber: number;
    };
    micronutrients: {
      vitaminA: number;
      vitaminC: number;
      calcium: number;
      iron: number;
    };
  };
  ingredients: string[];
  benefits: string[];
  concerns: string[];
  description: string;
  macronutrients: {
    protein: number;
    carbohydrates: number;
    fat: number;
    fiber: number;
  };
  micronutrients: {
    vitaminA: number;
    vitaminC: number;
    calcium: number;
    iron: number;
  };
}

// Create a singleton instance of the OpenAI client
let openAIClient: OpenAI | null = null;

// Function to handle project-scoped OpenAI API keys
function normalizeApiKey(key: string): string {
  if (!key) return '';
  
  // If it's already a standard key, return as is
  if (key.startsWith('sk-') && !key.startsWith('sk-proj-')) {
    return key;
  }
  
  // For project-scoped keys, use mock mode for now as these require special handling
  if (key.startsWith('sk-proj-')) {
    console.log('[openai-utils] Project-scoped API key detected, enabling mock mode');
    process.env.MOCK_OPENAI = 'true';
    return key;
  }
  
  return key;
}

// Updated OpenAI client initialization to support project-scoped API keys
export const createOpenAIClient = () => {
  if (openAIClient) {
    return openAIClient;
  }

  const apiKey = process.env.OPENAI_API_KEY;
  
  if (!apiKey) {
    console.error('OpenAI API key not found');
    throw new Error('OpenAI API key is required');
  }

  const isProjectScopedKey = apiKey.startsWith('sk-proj-');
  
  const config: ClientOptions = {
    apiKey,
    maxRetries: 3,
  };
  
  // Add special headers for project-scoped keys
  if (isProjectScopedKey) {
    config.defaultHeaders = {
      'OpenAI-Beta': 'assistants=v1'
    };
  }

  try {
    openAIClient = new OpenAI(config);
    console.log('[openai-utils] OpenAI client initialized successfully');
    return openAIClient;
  } catch (error) {
    console.error('Failed to initialize OpenAI client:', error);
    throw error;
  }
};

// Check if we should enable mock mode
export const shouldUseMockMode = () => {
  // Always return true to force mock mode
  console.log('[openai-utils] Forcing mock mode');
  return true;
};

/**
 * Get the OpenAI client
 */
export function getOpenAIClient() {
  if (!openAIClient) {
    openAIClient = createOpenAIClient();
  }
  return openAIClient;
}

/**
 * Generate a fallback meal analysis when OpenAI is unavailable
 * This allows the app to continue functioning even without API access
 */
export function generateFallbackMealAnalysis(imageUrl = '', goal = 'General Health'): any {
  console.log('[openai-utils] Generating fallback meal analysis');
  
  // Basic meal analysis with standard macro and micronutrients
  return {
    mealName: 'Food Analysis (Fallback)',
    calories: 500,
    goal: goal,
    macronutrients: [
      { name: "Protein", amount: 25, unit: "g", percentDailyValue: 50 },
      { name: "Carbs", amount: 50, unit: "g", percentDailyValue: 17 },
      { name: "Fat", amount: 20, unit: "g", percentDailyValue: 31 }
    ],
    micronutrients: [
      { name: "Vitamin C", amount: 45, unit: "mg", percentDailyValue: 50 },
      { name: "Iron", amount: 2.5, unit: "mg", percentDailyValue: 14 },
      { name: "Calcium", amount: 200, unit: "mg", percentDailyValue: 15 }
    ],
    foods: [
      { name: "Mixed Vegetables", amount: "1 serving" },
      { name: "Protein Source", amount: "3 oz" },
      { name: "Carbohydrates", amount: "1/2 cup" }
    ],
    insights: "This is a fallback analysis generated because the AI analysis service is currently unavailable. The nutritional information shown is an estimate and not specific to your meal. Please try again later for an accurate analysis.",
    _generated: "fallback",
    _timestamp: new Date().toISOString()
  };
}

/**
 * Process an image for meal analysis with retry logic
 * @param imageInput Base64 encoded image string or a direct image URL
 * @param userGoal User's health goal
 * @param mockMode Enable mock mode for testing without a real API key
 * @returns Processed analysis data
 */
export const analyzeImageWithGPT = async (
  imageUrl: string,
  goal: string
): Promise<ImageAnalysisResult> => {
  try {
    // If mock mode is enabled, return synthetic data
    if (shouldUseMockMode()) {
      console.log('[openai-utils] Running in MOCK mode - returning synthetic data');
      return generateMockImageAnalysis(goal);
    }

    const client = getOpenAIClient();
    
    // Use retry mechanism for robustness
    const response = await retryWithExponentialBackoff(
      async () => {
        return await client.chat.completions.create({
          model: "gpt-4-vision-preview",
          max_tokens: 1500,
          messages: [
            {
              role: "system",
              content: "You are a nutrition expert analyzing food images. Provide detailed nutritional information."
            },
            {
              role: "user",
              content: [
                { type: "text", text: `Analyze this meal image in detail. The user's goal is: ${goal}` },
                { type: "image_url", image_url: { url: imageUrl } }
              ]
            }
          ]
        });
      },
      {
        maxRetries: 3,
        baseDelayMs: 1000,
        onRetry: (attempt, error) => {
          console.warn(`[openai-utils] Retry attempt ${attempt} after error:`, error);
        }
      }
    );

    const responseText = response.choices[0].message.content;
    if (!responseText) {
      throw new Error('Empty response from OpenAI');
    }
    
    // Parse the JSON from the response - use our enhanced JSON parser
    // to handle any problematic formatting in the AI's response
    const data = safeJsonParse(responseText, {});
    
    // Validate the data - ensure it has the required fields
    const validatedData = validateMealAnalysisData(data);
    return validatedData;
  } catch (error) {
    console.error('[openai-utils] Image analysis failed after multiple attempts:', error);
    // Return a fallback response for graceful degradation
    return generateFallbackMealAnalysis(imageUrl, goal);
  }
};

// Generate mock data for image analysis when OpenAI isn't available
const generateMockImageAnalysis = (goal: string): ImageAnalysisResult => {
  return {
    foods: ['Grilled chicken breast', 'Steamed broccoli', 'Brown rice'],
    calories: 450,
    protein: 35,
    fat: 10,
    carbs: 55,
    analysis: {
      macronutrients: {
        protein: 35,
        carbohydrates: 55,
        fat: 10,
        fiber: 8
      },
      micronutrients: {
        vitaminA: 20,
        vitaminC: 80,
        calcium: 10,
        iron: 15
      }
    },
    ingredients: ['Chicken breast', 'Broccoli', 'Brown rice', 'Olive oil', 'Salt', 'Pepper', 'Garlic'],
    benefits: [
      'High in protein for muscle repair and growth',
      'Complex carbohydrates for sustained energy',
      'Rich in fiber for digestive health',
      'Contains essential vitamins and minerals'
    ],
    concerns: goal === 'Weight Loss' ? ['Portion size could be reduced slightly for weight loss'] : [],
    description: 'A balanced meal with lean protein, complex carbohydrates, and vegetables. Ideal for athletic performance and recovery.',
    macronutrients: {
      protein: 35,
      carbohydrates: 55,
      fat: 10,
      fiber: 8
    },
    micronutrients: {
      vitaminA: 20,
      vitaminC: 80,
      calcium: 10,
      iron: 15
    }
  };
};

// Add any other OpenAI functions below that your application needs
